{"version":3,"sources":["Components/editor/editor.js","Components/preview/preview.js","Container/App.js","serviceWorker.js","index.js"],"names":["Editor","state","window","style","expand","_this","setState","width","height","_this$props","this","props","handleChange","input","react_default","a","createElement","className","onClick","id","onChange","value","Component","Preview","_ref","dangerouslySetInnerHTML","__html","marked","gfm","breaks","App","e","target","editor_editor","preview_preview","Boolean","location","hostname","match","ReactDOM","render","src_Container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAwCeA,oNAlCbC,MAAQ,CACNC,QAAQ,EACRC,MAAO,MAGTC,OAAS,WACJC,EAAKJ,MAAMC,OACZG,EAAKC,SAAS,CACZJ,QAAQ,EACRC,MAAO,KAGTE,EAAKC,SAAS,CACZJ,QAAQ,EACRC,MAAO,CACLI,MAAO,QACPC,OAAQ,oFAOP,IAAAC,EACyBC,KAAKC,MAA7BC,EADDH,EACCG,aAAcC,EADfJ,EACeI,MACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYd,MAAOO,KAAKT,MAAME,OAC3CW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,UAAqCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAA2BC,QAASR,KAAKN,UAC3FU,EAAAC,EAAAC,cAAA,YAAUG,GAAG,SAASC,SAAUR,EAAcT,MAAOO,KAAKT,MAAME,MAAOkB,MAAOR,YA9BjES,8BCiBNC,SAhBC,SAAAC,GAAe,IAAZX,EAAYW,EAAZX,MAQjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUF,UAAU,iBAAiBQ,wBAP1C,CACLC,OAFiBC,IAAOd,EAAM,CAACe,KAAK,EAAMC,QAAQ,UCwBvCC,oNAtBb7B,MAAQ,CACNY,MAAO,yrCAGTD,aAAe,SAACmB,GACd,IAAMV,EAAQU,EAAEC,OAAOX,MACvBhB,EAAKC,SAAS,CACZO,MAAOQ,6EAIF,IACCR,EAAUH,KAAKT,MAAfY,MACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiB,EAAD,CAAQpB,MAAOA,EAAOD,aAAcF,KAAKE,eACzCE,EAAAC,EAAAC,cAACkB,EAAD,CAASrB,MAAOA,YAlBNS,cCIEa,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7fde74cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport './editor.css'\r\n\r\nclass Editor extends Component {\r\n\r\n  state = {\r\n    window: false,\r\n    style: {}\r\n  }\r\n\r\n  expand = () => {\r\n    if(this.state.window) {\r\n      this.setState({\r\n        window: false,\r\n        style: {}\r\n      })\r\n    } else {\r\n      this.setState({\r\n        window: true,\r\n        style: {\r\n          width: '800px',\r\n          height: '600px'\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { handleChange, input } = this.props\r\n    return (\r\n      <div className=\"editorBox\" style={this.state.style}>\r\n        <div className=\"editorHeader\">Editor <i className=\"fas fa-expand-arrows-alt\" onClick={this.expand}></i></div>\r\n        <textarea id=\"editor\" onChange={handleChange} style={this.state.style} value={input}></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport marked from \"marked\"\r\n\r\nimport './preview.css'\r\n\r\nconst Preview = ({ input }) => {\r\n\r\n  const mk = () => {\r\n  const converText = marked(input,{gfm: true, breaks: true})\r\n  return {\r\n    __html: converText\r\n  }\r\n  }\r\n  return (\r\n    <div className=\"previewBox\">\r\n      <div className=\"previewHeader\">Preview</div>\r\n      <div id=\"preview\" className=\"previewContent\" dangerouslySetInnerHTML={mk()}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import React, { Component } from 'react';\n\nimport Editor from 'Components/editor/editor'\nimport Preview from 'Components/preview/preview'\n\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    input: \"# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here's some other cool stuff:\\n  \\nHeres some code, `<div></div>`, between 2 backticks.\\n\\n```\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == '```' && lastLine == '```') {\\n    return multiLineCode;\\n  }\\n}\\n```\\n  \\nYou can also make text **bold**...\\n\\n whoa!\\n\\nOr _italic_.\\n\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere's also [links](https://www.freecodecamp.com), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | ------------- \\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbererd lists too.\\n1. Use just 1s if you want! \\n1. But the list goes on...\\n- Even if you use dashes or asterisks.\\n* And last but not least, let's not forget embedded images:\\n\\n![React Logo w/ Text](https://goo.gl/Umyytc)\\n\"\n  }\n\n  handleChange = (e) => {\n    const value = e.target.value;\n    this.setState({\n      input: value\n    })\n  }\n\n  render() {\n    const { input } = this.state\n    return (\n      <div className=\"App\">\n        <Editor input={input} handleChange={this.handleChange} />\n        <Preview input={input} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}